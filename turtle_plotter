#!/usr/bin/python3
"""
Basic 2D turtle plotter from stdin.
"""
__author__  = "Josef Kubin"
__date__    = "2018/07/24"
__email__   = "Base64: bTR1bml4QGdtYWlsLmNvbQ"
__status__  = "Prod"
__license__ = "GPL"
__version__ = "1.0.0"

import sys
import json
import argparse
import textwrap
import turtle as tu

parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description=textwrap.dedent('''\
                Basic 2D turtle plotter of turtle graphic received from stdin.
                The first line contains the configuration of the turtle plotter.
                The second line contains the symbols.

                m4 lsys.m4 grammar.ls | turtle_plotter
                turtle_plotter < data.txt

                Keyboard shortcuts:
                'l': exit
                'Enter/ESC': exit
                Keyboard shortcuts for the interactive mode [-i]:
                'k': faster
                'j': slower
                'f/h': finish
                '''))

parser.add_argument("-i", "--interactive",
        help="keyboard control",
        action="store_true")

args = parser.parse_args()

try:
    cfg = json.loads('{' + sys.stdin.readline() + '"":""}')

except ValueError:
    print("error: invalid input data")
    sys.exit(-1)

if len(cfg.keys()) == 1:
    print("error: empty configuration data")
    sys.exit(-1)

if list(cfg.keys())[0] != 'title':
    print("error: invalid configuration data")
    sys.exit(-1)

if 'turtle' in cfg:
    if cfg['turtle'] != 'tkinter':
        print ("error: unknown \"turtle\":\"" + cfg['turtle'] +
                "\" (\"tkinter\" expected)")
        sys.exit(-1)

try:
    angle = float(cfg.get('angle', 90))
    bend = float(cfg.get('bend', 0))
    penw = int(cfg.get('penw', 1))
    scale = float(cfg.get('scale', 1))
    seth = float(cfg.get('seth', 0))
    setx = float(cfg.get('setx', 0))
    sety = float(cfg.get('sety', 0))
    step = float_step = float(cfg.get('step', 5))
    window_height = float(cfg.get('height', 1))
    window_width = float(cfg.get('width', 1))

except ValueError as val:
    print("error: configuration data,", val)
    sys.exit(-1)

stack_angle = []
stack_position = []
stack_step = []
stack_thickness = []
stack_float_step = []

tu.setup(width = window_width, height = window_height)

tu.hideturtle()
tu.seth(seth)
tu.width(penw)
tu.title(cfg['title'])
tu.penup()
tu.setpos(setx, sety)

if args.interactive:
    tu.speed(5)
    tu.showturtle()
else:
    tu.tracer(0)

tu.pendown()

def faster_turtle():
    if tu.speed() < 9:
        tu.speed(tu.speed() + 1)
        tu.delay(tu.delay() + 10)

def slower_turtle():
    if tu.speed() > 1:
        tu.speed(tu.speed() - 1)
        tu.delay(tu.delay() - 10)

def pause_turtle():
    if tu.delay() == 1000:
        tu.delay(tu.previous_delay)
    else:
        tu.previous_delay = tu.delay()
        tu.delay(1000)

def finish_turtle():
    tu.tracer(0)
    tu.hideturtle()

tu.listen()

tu.onkey(tu.bye, "Return")
tu.onkey(tu.bye, "Escape")
tu.onkey(tu.bye, "l")
tu.onkey(finish_turtle, "h")
tu.onkey(faster_turtle, "k")
tu.onkey(slower_turtle, "j")
tu.onkey(pause_turtle, " ")
tu.onkey(finish_turtle, "f")

def turn_to_the_right():
    tu.right(angle + bend)

def turn_to_the_left():
    tu.left(angle - bend)

def increase_pen_width():
    tu.width(tu.width() + 1)

def decrease_pen_width():
    tu.width(tu.width() - 1)

def reverse_direction():
    tu.right(180)

def write_line_black():
    tu.right(bend)
    tu.pencolor('black')
    tu.forward(step)

def write_line_half():
    tu.right(bend)
    tu.pencolor('black')
    tu.forward(step/2)

def write_line_red():
    tu.right(bend)
    tu.pencolor('red')
    tu.forward(step)

def write_line_green():
    tu.right(bend)
    tu.pencolor('green')
    tu.forward(step)

def write_line_blue():
    tu.right(bend)
    tu.pencolor('blue')
    tu.forward(step)

def write_line_brown():
    tu.right(bend)
    tu.pencolor('brown')
    tu.forward(step)

def write_line_magenta():
    tu.right(bend)
    tu.pencolor('magenta')
    tu.forward(step)

def move_pen():
    tu.penup()
    tu.forward(step)
    tu.pendown()

def move_pen_half():
    tu.penup()
    tu.forward(step/2)
    tu.pendown()

def push_node():
    stack_angle.append(tu.heading())
    stack_position.append(tu.position())
    stack_thickness.append(tu.width())
    stack_float_step.append(float_step)
    stack_step.append(step)

def pop_node():
    tu.penup()
    tu.setheading(stack_angle.pop())
    tu.setposition(stack_position.pop())
    tu.width(stack_thickness.pop())

    global float_step, step
    float_step = stack_float_step.pop()
    step = stack_step.pop()

    tu.pendown()

def extend_line():
    global float_step, step
    float_step *= scale
    step = round(float_step)

def shrink_line():
    global float_step, step
    float_step /= scale
    step = round(float_step)

def screen_update():
    tu.update()
    tu.hideturtle()

growing_rules = {
        "+":turn_to_the_left,
        "-":turn_to_the_right,
        "F":write_line_black,
        "Z":write_line_half,
        "R":write_line_red,
        "G":write_line_green,
        "B":write_line_blue,
        "W":write_line_brown,
        "M":write_line_magenta,
        "f":move_pen,
        "z":move_pen_half,
        "[":push_node,
        "|":reverse_direction,
        "]":pop_node,
        ">":extend_line,
        "<":shrink_line,
        "#":increase_pen_width,
        "!":decrease_pen_width,
        "\n":screen_update
        }

try:
    for symbol in sys.stdin.readline():
        growing_rules[symbol]()

except KeyError:
    print("error: an unknown symbol ‘{0}’ was found".format(symbol))
    sys.exit(-1)

except tu.Terminator:
    print("interrupted ...")
    sys.exit(0)

tu.onkey(tu.bye, "h")
tu.onkey(tu.bye, "j")
tu.onkey(tu.bye, "m")
tu.onkey(tu.bye, "n")
tu.done()
