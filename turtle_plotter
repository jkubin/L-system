#!/usr/bin/python3
"""
Basic 2D turtle plotter.
"""
__author__  = "Josef Kubin"
__date__    = "2018/07/24"
__email__   = "Base64: bTR1bml4QGdtYWlsLmNvbQ"
__status__  = "Prod"
__license__ = "GPL"
__version__ = "1.0.0"

import sys
import json
import argparse
import textwrap
import turtle as tu

parser = argparse.ArgumentParser(
        formatter_class=argparse.RawDescriptionHelpFormatter,
        description=textwrap.dedent('''\
                Basic 2D turtle plotter of turtle graphic received from stdin.
                The first line contains the configuration of the turtle plotter.
                The second line contains the symbols.

                m4 lsys.m4 grammar.ls | turtle_plotter
                turtle_plotter < data.txt

                Keyboard shortcuts:
                'l': exit
                'Esc': exit
                'Space': pause

                Keyboard shortcuts for the interactive mode [-i]:
                'j': slower
                'k': faster
                'f': finish
                'h': finish
                'Enter': finish

                Keyboard shortcuts after drawing:
                'f': exit
                'h': exit
                'j': exit
                'k': exit
                'n': exit
                'm': exit
                'Enter': exit
                '''))

parser.add_argument("-i", "--interactive",
        help="keyboard control",
        action="store_true")

args = parser.parse_args()
stack_angle = []
stack_color = []
stack_float_step = []
stack_position = []
stack_step = []
stack_thickness = []

try:
    cfg = json.loads('{' + sys.stdin.readline() + '"":0}')

except ValueError:
    print("error: invalid input (JSON) configuration data")
    sys.exit(-1)

if len(cfg.keys()) == 1:
    print("error: empty configuration data")
    sys.exit(-1)

if list(cfg.keys())[0] != 'title' or 'angle' not in cfg:
    print("error: invalid configuration data (not a turtle configuration)")
    sys.exit(-1)

if 'turtle' in cfg:
    if cfg['turtle'] != 'tkinter':
        print ("error: unknown \"turtle\":\"" + cfg['turtle'] +
                "\" (\"tkinter\" expected)")
        sys.exit(-1)

try:

    angle = float(cfg['angle'])
    bend = float(cfg.get('bend', 0))    # angular asymmetry
    penc = list(cfg.get('penc', ['black'])) # pen color
    peni = int(cfg.get('peni', 1))  # pen increment
    penw = int(cfg.get('penw', 1))  # pen width
    scale = float(cfg.get('scale', 1))
    seth = float(cfg.get('seth', 0))
    setx = float(cfg.get('setx', 0))
    sety = float(cfg.get('sety', 0))
    speed = int(cfg.get('speed', 5))    # starting drawing speed (interactive mode)
    step = float_step = float(cfg.get('step', 10))
    window_height = float(cfg.get('height', 1))
    window_width = float(cfg.get('width', 1))

except ValueError as val:
    print("error: configuration data,", val)
    sys.exit(-1)

tu.setup(width = window_width, height = window_height)
tu.hideturtle()
tu.seth(seth)
tu.width(penw)
tu.title(cfg['title'])
tu.penup()
tu.setpos(setx, sety)

if args.interactive:
    tu.speed(speed)
    if not speed:
        tu.delay(0)
    tu.showturtle()
else:
    tu.tracer(0)

tu.color_index = 0
tu.color_value = penc[tu.color_index]
tu.pendown()

def faster_turtle():
    if tu.speed():
        if tu.speed() < 10:
            tu.speed(tu.speed() + 1)
        elif tu.speed() == 10:
            tu.speed(0)
            # FIXME: the turtle's window sometimes freezes if tu.delay(0)
            # possible workaround: tu.delay(1)
            tu.delay(0)

def slower_turtle():
    if tu.speed():
        if tu.speed() > 1:
            tu.speed(tu.speed() - 1)
    else:
        tu.speed(10)
        tu.delay(10)

def pause_turtle():
    if tu.delay() == 1000:
        tu.delay(tu.previous_delay)
        tu.speed(tu.previous_speed)
    else:
        tu.previous_delay = tu.delay()
        tu.previous_speed = tu.speed()
        tu.delay(1000)
        tu.speed(1)

def finish_turtle():
    tu.hideturtle()
    tu.tracer(0)

def exit_turtle():
    tu.bye()

tu.listen()

tu.onkey(faster_turtle, "k")
tu.onkey(finish_turtle, "Return")
tu.onkey(finish_turtle, "f")
tu.onkey(finish_turtle, "h")
tu.onkey(pause_turtle, " ")
tu.onkey(slower_turtle, "j")
tu.onkey(exit_turtle, "Escape")
tu.onkey(exit_turtle, "l")

def turn_to_the_right():
    tu.right(angle + bend)

def turn_to_the_left():
    tu.left(angle - bend)

def increase_pen_width():
    tu.width(tu.width() + peni)

def decrease_pen_width():
    tu.width(tu.width() - peni)

def reverse_direction():
    tu.right(180)

def write_line():
    tu.right(bend)
    tu.pencolor(tu.color_value)
    tu.forward(step)

def write_line_half():
    tu.right(bend)
    tu.pencolor(tu.color_value)
    tu.forward(step/2)

# http://www.science.smith.edu/dftwiki/index.php/Color_Charts_for_TKinter
def write_line_black():
    tu.right(bend)
    tu.pencolor('black')
    tu.forward(step)

def write_line_red():
    tu.right(bend)
    tu.pencolor('red')
    tu.forward(step)

def write_line_green():
    tu.right(bend)
    tu.pencolor('green')
    tu.forward(step)

def write_line_blue():
    tu.right(bend)
    tu.pencolor('blue')
    tu.forward(step)

def write_line_brown():
    tu.right(bend)
    tu.pencolor('brown')
    tu.forward(step)

def write_line_magenta():
    tu.right(bend)
    tu.pencolor('magenta')
    tu.forward(step)

def write_line_lime_green():
    tu.right(bend)
    tu.pencolor('lime green')
    tu.forward(step)

def move_pen():
    tu.penup()
    tu.forward(step)
    tu.pendown()

def move_pen_half():
    tu.penup()
    tu.forward(step/2)
    tu.pendown()

def push_node():

    stack_angle.append(tu.heading())
    stack_float_step.append(float_step)
    stack_position.append(tu.position())
    stack_step.append(step)
    stack_thickness.append(tu.width())

    #stack_color.append(tu.color_index)

def pop_node():
    tu.penup()

    tu.setheading(stack_angle.pop())
    tu.setposition(stack_position.pop())
    tu.width(stack_thickness.pop())

    global float_step, step
    float_step = stack_float_step.pop()
    step = stack_step.pop()

    # tu.color_index = stack_color.pop()
    # tu.color_value = penc[tu.color_index]

    tu.pendown()

def extend_line():
    global float_step, step
    float_step *= scale
    step = round(float_step)

def shrink_line():
    global float_step, step
    float_step /= scale
    step = round(float_step)

def increment_pen_color_index():
    tu.color_index += 1
    tu.color_value = penc[tu.color_index]

def decrement_pen_color_index():
    tu.color_index -= 1
    tu.color_value = penc[tu.color_index]

growing_rules = {

        # well known symbols
        "+":turn_to_the_left,
        "-":turn_to_the_right,
        "F":write_line,
        "f":move_pen,
        "[":push_node,
        "|":reverse_direction,
        "]":pop_node,
        ">":extend_line,
        "<":shrink_line,
        "#":increase_pen_width,
        "!":decrease_pen_width,
        "`":increment_pen_color_index,
        "'":decrement_pen_color_index,


        # these symbols are not widely used
        "z":move_pen_half,
        "Z":write_line_half,

        # custom color symbols
        "K":write_line_black,
        "R":write_line_red,
        "G":write_line_green,
        "B":write_line_blue,
        "L":write_line_lime_green,
        "M":write_line_magenta,
        "N":write_line_brown,

        # all drawing symbols have been processed, so update the turtle canvas
        "\n":tu.update
        }

try:
    for symbol in sys.stdin.readline():
        growing_rules[symbol]()

except KeyError:
    print("error: an unknown symbol ‘{0}’ was found (symbol is not in the turtle alphabet growth rules)".format(symbol))
    sys.exit(-1)

except IndexError as val:
    print("error: pen color,", val)
    sys.exit(-1)

except tu.Terminator:
    print("interrupted ...")
    sys.exit(0)

# most of the previously defined keyboard shortcuts are redefined for better ergonomics
tu.onkey(exit_turtle, "h")
tu.onkey(exit_turtle, "j")
tu.onkey(exit_turtle, "k")
tu.onkey(exit_turtle, "m")
tu.onkey(exit_turtle, "n")
tu.onkey(exit_turtle, "f")
tu.onkey(exit_turtle, "Return")

tu.hideturtle()
tu.done()
